import pandas as pd
import random
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

filepath = 'abalone.data.txt'

columns = ['Sex', 'Length','Diameter','Height','Whole_weight',
'Shucked_weight','Viscera_weight','Shell_weight','Rings']

def load_dataset(filepath):
    """Load in the data from the txt or csv file you've downloaded.

    inputs:

    :filepath: a string containing the filepath to the csv file with the
    raw data.

    returns:

    :dataset: a Pandas dataframe containing the data in the csv file located
    at filepath. It should have column names corresponding to the names of the
    variables in the abalone dataset.
    """
    abalone_data = pd.read_csv(filepath, header = None, sep = ',')
    abalone_data.columns = columns
    return(abalone_data)



def preprocess_dataset(dataset):
    """Rescales the real-valued features in dataset such that they take on
    values between 0 and 1, and converts the categorical M/F/I Sex label to
    one-hot form.

    params:

    :dataset: a Pandas DataFrame containing the raw data as loaded by the
    load_dataset() function.

    returns: the preprocessed dataset as a Pandas DataFrame
    """
    abalone_data = dataset
    rings = abalone_data['Rings']
    sex = abalone_data['Sex']

    abalone_data = abalone_data.drop('Sex', axis = 1)
    abalone_data = abalone_data.drop('Rings', axis = 1)

    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(abalone_data)

    scaled_data = pd.DataFrame(scaled_data)
    scaled_data.columns = ['Length', 'Diameter', 'Height', 'Whole_weight', 'Shucked_weight', 'Viscera_weight', 'Shell_weight']


    scaled_data['Sex'] = sex
    scaled_data['Rings'] = rings

    scaled_data['Sex'].replace(['M', 'F', 'I'], [1, 1, 0], inplace=True)

    return(scaled_data)


    


def split_train_and_test(dataset,test_frac=0.25):
    """Splits the preprocessed dataset into a training subset and a testing
    subset.

    params:

    :dataset: a Pandas DataFrame containing the preprocessed data generated by
    the preprocess_dataset() function.

    :test_frac: the fraction of the total dataset to be reserved for the testing
    set.

    returns: train_data and test_data, two Pandas DataFrames respectively
    containing the training and testing data (in shuffled order).
    """

    dataset = preprocess_dataset(load_dataset('abalone.data.txt'))
    rand_data = dataset.sample(frac = 1)

    scaled_test_frac = int(test_frac * 4177)

    test_data = rand_data.iloc[0:scaled_test_frac, :]
    train_data = rand_data.iloc[scaled_test_frac: 4176, :]

    train_data1 = train_data[train_data['Rings'] < 10]
    train_data1 = train_data1.drop('Length', axis = 1)
    train_data1 = train_data1.drop('Whole_weight', axis = 1)

    test_data1 = test_data[test_data['Rings'] < 10]
    test_data1 = test_data1.drop('Length', axis = 1)
    test_data1 = test_data1.drop('Whole_weight', axis = 1)

    train_data2 = train_data[train_data['Rings'] >= 10]
    train_data2 = train_data[train_data['Rings'] < 17]
    test_data2 = test_data[test_data['Rings'] >= 10]
    test_data2 = test_data[test_data['Rings'] < 17]

    train_data3 = train_data[train_data['Rings'] >= 17]
    test_data3 = test_data[test_data['Rings'] >= 17]

    return(train_data1, test_data1, train_data2, test_data2, train_data3, test_data3)
    

def split_inputs_and_labels(dataset):
    """Separates dataset into its input and label components.

    params:

    :dataset: a Pandas DataFrame containing preprocessed data, which is to be
    separated into its inputs and labels.

    returns: inputs and labels, two pandas DataFrames respectively containing
    all the input columns (all columns except Rings), and the Rings column only.
    """
    data = dataset
    labels = data['Rings']
    inputs = data.drop('Rings', axis = 1)

    return(inputs, labels)
    

def generate_data():
    """Loads the raw data contained in abalone.data.txt using the load_dataset()
    function, preprocesses the data using the preprocess_dataset() function,
    splits it into testing and training sets using the split_train_and_test()
    function, and finally generates separate testing/training inputs and labels
    using the split_inputs_and_labels() function.

    params: None

    returns: the testing and training inputs and labels as Pandas DataFrames.
    """

    raw_data = load_dataset(filepath)
    preprocessed_data = preprocess_dataset(raw_data)


    train1, test1, train2, test2, train3, test3 = split_train_and_test(preprocessed_data)

    train_inputs1, train_labels1 = split_inputs_and_labels(train1)
    test_inputs1, test_labels1 = split_inputs_and_labels(test1)

    train_inputs2, train_labels2 = split_inputs_and_labels(train2)
    test_inputs2, test_labels2 = split_inputs_and_labels(test2)

    train_inputs3, train_labels3 = split_inputs_and_labels(train3)
    test_inputs3, test_labels3 = split_inputs_and_labels(test3)


    return(train_inputs1, train_labels1, test_inputs1, test_labels1, train_inputs2, train_labels2, test_inputs2, test_labels2, train_inputs3, train_labels3, test_inputs3, test_labels3)
